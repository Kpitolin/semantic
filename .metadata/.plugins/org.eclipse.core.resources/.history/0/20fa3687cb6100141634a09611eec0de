package controller;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import au.com.bytecode.opencsv.CSVReader;
import service.Service;


public class SearchBoxServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;
	private final static char SEPARATOR = ';';
	protected void processRequest(HttpServletRequest request, HttpServletResponse response)
	          throws ServletException, IOException {
		
//		String commandStr = request.getParameter("action");
//		if(!commandStr.isEmpty()){
//			Action action = null;
//			if(commandStr.equals("SearchEngine")){
//				action = new SearchEngineAction();
//			}
//			action.execute(request);
//		}
	}
	
	 /**
	   * Handles the HTTP
	   * <code>GET</code> method.
	   *
	   * @param request servlet request
	   * @param response servlet response
	   * @throws ServletException if a servlet-specific error occurs
	   * @throws IOException if an I/O error occurs
	   */
	  @Override
	  protected void doGet(HttpServletRequest request, HttpServletResponse response)
	          throws ServletException, IOException {
	    processRequest(request, response);
	  }

	  /**
	   * Handles the HTTP
	   * <code>POST</code> method.
	   *
	   * @param request servlet request
	   * @param response servlet response
	   * @throws ServletException if a servlet-specific error occurs
	   * @throws IOException if an I/O error occurs
	   */
	  @Override
	  protected void doPost(HttpServletRequest request, HttpServletResponse response)
	          throws ServletException, IOException {
		  
			response.setContentType("application/json");
		    Service s = new Service();
		    
		    File file = new File("C:\\Users\\Thomas\\Documents\\4IF\\semantic\\ProjetSE_interface\\matrice_jaccard.csv");
	        FileReader fr = new FileReader(file);
	        CSVReader csvReader = new CSVReader(fr, SEPARATOR);
	        
	        List<String[] > data = new ArrayList<String[] >();
	        String[] nextLine = null;
	        String[] firstLine = null;
			while ((nextLine = csvReader.readNext()) != null) {
			    int size = nextLine.length;
			    // ligne vide
			    if (size == 0) {
			        continue;
			    }			    
			    
			    String debut = nextLine[0].trim();
			    // recupere la premiere ligne et on insere le reste dans ligne dans la liste data
			    if (debut.startsWith("#")) {
			        firstLine = nextLine;
			    }else{
			    	if (debut.length() == 0 && size == 1) {
			    		continue;
			    	}
			    	data.add(nextLine);
			    }
			}

			JSONObject objJSON = new JSONObject();
			
			JSONArray listNodes = new JSONArray();
			JSONArray listLinks = new JSONArray();
	        // traitement des données
	        for (String[] oneData : data) {
	        	int i = 1;
	        	double indiceJaccard = Double.parseDouble(oneData[i]);

	    		String noeud1 = oneData[0];
				JSONObject aNode = new JSONObject();
				aNode.putIfAbsent("name",noeud1);	
				
				if(!listNodes.contains(aNode)){
					listNodes.add(aNode);
				}
	        	
	        	while(indiceJaccard != 1){
	        		String noeud2 = firstLine[i];

	        		if(indiceJaccard >= 0){
	        			JSONObject aLink = new JSONObject();
	        			
	        			aLink.put("source",noeud1);
	        			aLink.put("target",noeud2);	
	        			listLinks.add(aLink);
	        		}
	        		i++;
	        		indiceJaccard = Double.parseDouble(oneData[i]);
	        	}
	        }
	        objJSON.put("links", listLinks);
			objJSON.put("nodes", listNodes);
			
		
			File output= new File("similarity_graph.json"); 
		    FileWriter fileWriter = new FileWriter(output); 
			fileWriter.write(objJSON.toJSONString());
			fileWriter.flush();
			fileWriter.close();
//		    JSONObject jsonObj = s.exploreSimiliratyFromCSV("C:\\Users\\Thomas\\Documents\\4IF\\semantic\\ProjetSE_interface\\matrice_jaccard.csv", 0.6);
		    StringWriter out = new StringWriter();
			objJSON.writeJSONString(out);
			String jsonText = out.toString();
			response.getWriter().write(jsonText);
	  }
	  
	  /**
	   * Returns a short description of the servlet.
	   *
	   * @return a String containing servlet description
	   */
	  @Override
	  public String getServletInfo() {
	    return "Short description";
	  }
	  
	  @Override
	  public void init() throws ServletException {
	    try {
	    } catch (Exception e) {
	      throw new ServletException(e.getMessage());
	    }
	  }
	  
	  public void destroy() {
	    super.destroy();
	    try {
	    } catch (Exception e) {
	      e.printStackTrace();
	    }
	  }

}
